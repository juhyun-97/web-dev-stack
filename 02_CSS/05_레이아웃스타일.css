/* width, height */
/* px : 고정크기 / % : 부모 기준 비율 
/ vw, vh : 뷰포트 너비, 높이 기준 비율 */
#fixed-size {
  width: 300px;
  height: 150px;
  background-color: lightblue;
}
#variable-size {
  width: 80%;
  height: 100vh;
  background-color: lightgreen;
}
/* padding, margin */
.space {
  background: lightyellow;
  border: 1px solid;
  margin-bottom: 10px;
}
#padding1 {
  padding: 20px;
}
#padding2 {
  padding-top: 30px;
  padding-left: 10px;
  padding-right: 20px;
  padding-bottom: 40px;
  /* top right bottom left(시계방향순서대로) */
  padding: 30px 20px 40px 10px;
  /* top right/left bottom */
  padding: 30px 20px 40px;
  /* top/bottom right/left */
  padding: 30px 20px;
}
#margin1 {
  margin: 20px;
}
#margin2 {
  margin: 5px 15px 10px 30px;
}
.collapse-box {
  background-color: lightcoral;
  padding: 10px;
  border: 1px solid #444;
}
#box1 {
  margin-bottom: 50px;
}
#box2 {
  margin-top: 30px;
}
.center-box {
  width: 200px;
  height: 100px;
  background: lightseagreen;
  color: white;
  text-align: center;
  line-height: 100px;
  /* height, line-height px 같을시 text-align center적용시 정가운데정렬 */
  margin: auto;
}
.border {
  width: 100px;
  height: 100px;
  margin: 10px;
  background: #eee;
  display: inline-block;
}
#border1 {
  /* solid : 실선 */
  border: 3px solid orange;
}
#border2 {
  /* dashed : 점선 */
  border: 5px dashed green;
}
#border3 {
  /* dotted : 도트선 */
  border: 2px dotted blue;
}
.radius-box {
  width: 120px;
  height: 120px;
  background: plum;
  color: white;
  text-align: center;
  line-height: 120px;
  margin-bottom: 10px;
}
.radius1 {
  border-radius: 10px;
}
.radius2 {
  border-radius: 50%;
}
/* box-sizing */
.box {
  width: 300px;
  height: 200px;
  padding: 20px;
  border: 10px solid;
  background-color: lightcoral;
  margin: 10px;
}
.box-content {
  box-sizing: content-box;
}
.box-border {
  box-sizing: border-box;
}
/* display */
.display {
  background-color: pink;
  padding: 10px;
  margin: 5px;
  width: 150px;
  height: 70px;
}
.display-inline {
  display: inline;
}
.display-block {
  display: block;
}
.display-inline-block {
  display: inline-block;
}
/* float */
.float {
  float: left;
  width: 80px;
  height: 80px;
  margin: 5px;
  background-color: skyblue;
  text-align: center;
  line-height: 80px;
}
/* position */
#outer {
  position: relative;
  width: 400px;
  height: 200px;
  background: #f4f4f4;
  overflow: auto;
}
.position-box {
  width: 100px;
  height: 100px;
}
#relative {
  background-color: orange;
  position: relative;
  /* top, bottom, left, right */
  bottom: 100px;
  right: -50px;
}
/* 현재 내가 시작한 위치부터 시작함 */
#absolute {
  background-color: green;
  position: absolute;
  bottom: 20px;
  left: 30px;
}
#fixed {
  background-color: red;
  position: fixed;
  right: 20px;
  top: 30px;
}
/* sitcky 주로 상단메뉴 스크롤 내려도 고정하고싶을때? */
#sticky {
  background: blue;
  position: sticky;
  top: 0;
}
.visibility {
  width: 100px;
  height: 100px;
  margin: 10px;
  background-color: lightgray;
  display: inline-block;
}
#vis2 {
  visibility: visible;
}
#vis1 {
  visibility: hidden;
}
/* visibility hidden처리하면 공간은 그대로 남아있고 박스만 사라짐 */
#dis1 {
  display: none;
}
/* display none 처리하면 화면에서 사라짐. 태그는 유지. */
#z-outer {
  width: 200px;
  height: 200px;
  background-color: #ddd;
  position: relative;
}
/* z-index 겹겹이 쌓아놓을때 씀 */
.z-index {
  width: 100px;
  height: 100px;
  position: absolute;
  opacity: 0.5;
}
#z-index1 {
  background-color: red;
  z-index: 1;
  top: 20px;
  left: 20px;
}
#z-index2 {
  background-color: green;
  z-index: 2;
  top: 40px;
  left: 40px;
}
#z-index3 {
  background-color: blue;
  z-index: 9999;
}
/* 9999 = 무조건 해당색을 위로 올리고싶다 */
